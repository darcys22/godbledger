// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/transaction/transaction.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactorClient is the client API for Transactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactorClient interface {
	AddTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	DeleteTransaction(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	VoidTransaction(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	NodeVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	AddTag(ctx context.Context, in *AccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	DeleteTag(ctx context.Context, in *DeleteAccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	AddCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetTB(ctx context.Context, in *TBRequest, opts ...grpc.CallOption) (*TBResponse, error)
	GetListing(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ListingResponse, error)
	AddAccount(ctx context.Context, in *AccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	ReconcileTransactions(ctx context.Context, in *ReconciliationRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	AddTransactionFeedAccount(ctx context.Context, in *TransactionFeedAccountRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	AddTransactionFeed(ctx context.Context, in *TransactionFeedRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type transactorClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactorClient(cc grpc.ClientConnInterface) TransactorClient {
	return &transactorClient{cc}
}

func (c *transactorClient) AddTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) DeleteTransaction(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/DeleteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) VoidTransaction(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/VoidTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) NodeVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/NodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) AddTag(ctx context.Context, in *AccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) DeleteTag(ctx context.Context, in *DeleteAccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) AddCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/AddCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/DeleteCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) GetTB(ctx context.Context, in *TBRequest, opts ...grpc.CallOption) (*TBResponse, error) {
	out := new(TBResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/GetTB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) GetListing(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ListingResponse, error) {
	out := new(ListingResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/GetListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) AddAccount(ctx context.Context, in *AccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) DeleteAccount(ctx context.Context, in *DeleteAccountTagRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) ReconcileTransactions(ctx context.Context, in *ReconciliationRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/ReconcileTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) AddTransactionFeedAccount(ctx context.Context, in *TransactionFeedAccountRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/AddTransactionFeedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) AddTransactionFeed(ctx context.Context, in *TransactionFeedRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transactor/AddTransactionFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactorServer is the server API for Transactor service.
// All implementations must embed UnimplementedTransactorServer
// for forward compatibility
type TransactorServer interface {
	AddTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	DeleteTransaction(context.Context, *DeleteRequest) (*TransactionResponse, error)
	VoidTransaction(context.Context, *DeleteRequest) (*TransactionResponse, error)
	NodeVersion(context.Context, *VersionRequest) (*VersionResponse, error)
	AddTag(context.Context, *AccountTagRequest) (*TransactionResponse, error)
	DeleteTag(context.Context, *DeleteAccountTagRequest) (*TransactionResponse, error)
	AddCurrency(context.Context, *CurrencyRequest) (*TransactionResponse, error)
	DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*TransactionResponse, error)
	GetTB(context.Context, *TBRequest) (*TBResponse, error)
	GetListing(context.Context, *ReportRequest) (*ListingResponse, error)
	AddAccount(context.Context, *AccountTagRequest) (*TransactionResponse, error)
	DeleteAccount(context.Context, *DeleteAccountTagRequest) (*TransactionResponse, error)
	ReconcileTransactions(context.Context, *ReconciliationRequest) (*TransactionResponse, error)
	AddTransactionFeedAccount(context.Context, *TransactionFeedAccountRequest) (*TransactionResponse, error)
	AddTransactionFeed(context.Context, *TransactionFeedRequest) (*TransactionResponse, error)
	mustEmbedUnimplementedTransactorServer()
}

// UnimplementedTransactorServer must be embedded to have forward compatible implementations.
type UnimplementedTransactorServer struct {
}

func (UnimplementedTransactorServer) AddTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedTransactorServer) DeleteTransaction(context.Context, *DeleteRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedTransactorServer) VoidTransaction(context.Context, *DeleteRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoidTransaction not implemented")
}
func (UnimplementedTransactorServer) NodeVersion(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeVersion not implemented")
}
func (UnimplementedTransactorServer) AddTag(context.Context, *AccountTagRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedTransactorServer) DeleteTag(context.Context, *DeleteAccountTagRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedTransactorServer) AddCurrency(context.Context, *CurrencyRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCurrency not implemented")
}
func (UnimplementedTransactorServer) DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrency not implemented")
}
func (UnimplementedTransactorServer) GetTB(context.Context, *TBRequest) (*TBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTB not implemented")
}
func (UnimplementedTransactorServer) GetListing(context.Context, *ReportRequest) (*ListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListing not implemented")
}
func (UnimplementedTransactorServer) AddAccount(context.Context, *AccountTagRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedTransactorServer) DeleteAccount(context.Context, *DeleteAccountTagRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedTransactorServer) ReconcileTransactions(context.Context, *ReconciliationRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconcileTransactions not implemented")
}
func (UnimplementedTransactorServer) AddTransactionFeedAccount(context.Context, *TransactionFeedAccountRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransactionFeedAccount not implemented")
}
func (UnimplementedTransactorServer) AddTransactionFeed(context.Context, *TransactionFeedRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransactionFeed not implemented")
}
func (UnimplementedTransactorServer) mustEmbedUnimplementedTransactorServer() {}

// UnsafeTransactorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactorServer will
// result in compilation errors.
type UnsafeTransactorServer interface {
	mustEmbedUnimplementedTransactorServer()
}

func RegisterTransactorServer(s grpc.ServiceRegistrar, srv TransactorServer) {
	s.RegisterService(&Transactor_ServiceDesc, srv)
}

func _Transactor_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).AddTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/DeleteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).DeleteTransaction(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_VoidTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).VoidTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/VoidTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).VoidTransaction(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_NodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).NodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/NodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).NodeVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).AddTag(ctx, req.(*AccountTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).DeleteTag(ctx, req.(*DeleteAccountTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_AddCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).AddCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/AddCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).AddCurrency(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/DeleteCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).DeleteCurrency(ctx, req.(*DeleteCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_GetTB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).GetTB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/GetTB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).GetTB(ctx, req.(*TBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_GetListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).GetListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/GetListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).GetListing(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).AddAccount(ctx, req.(*AccountTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).DeleteAccount(ctx, req.(*DeleteAccountTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_ReconcileTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconciliationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).ReconcileTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/ReconcileTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).ReconcileTransactions(ctx, req.(*ReconciliationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_AddTransactionFeedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionFeedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).AddTransactionFeedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/AddTransactionFeedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).AddTransactionFeedAccount(ctx, req.(*TransactionFeedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_AddTransactionFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).AddTransactionFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transactor/AddTransactionFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).AddTransactionFeed(ctx, req.(*TransactionFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transactor_ServiceDesc is the grpc.ServiceDesc for Transactor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.Transactor",
	HandlerType: (*TransactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTransaction",
			Handler:    _Transactor_AddTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _Transactor_DeleteTransaction_Handler,
		},
		{
			MethodName: "VoidTransaction",
			Handler:    _Transactor_VoidTransaction_Handler,
		},
		{
			MethodName: "NodeVersion",
			Handler:    _Transactor_NodeVersion_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _Transactor_AddTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Transactor_DeleteTag_Handler,
		},
		{
			MethodName: "AddCurrency",
			Handler:    _Transactor_AddCurrency_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _Transactor_DeleteCurrency_Handler,
		},
		{
			MethodName: "GetTB",
			Handler:    _Transactor_GetTB_Handler,
		},
		{
			MethodName: "GetListing",
			Handler:    _Transactor_GetListing_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _Transactor_AddAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Transactor_DeleteAccount_Handler,
		},
		{
			MethodName: "ReconcileTransactions",
			Handler:    _Transactor_ReconcileTransactions_Handler,
		},
		{
			MethodName: "AddTransactionFeedAccount",
			Handler:    _Transactor_AddTransactionFeedAccount_Handler,
		},
		{
			MethodName: "AddTransactionFeed",
			Handler:    _Transactor_AddTransactionFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/transaction/transaction.proto",
}
